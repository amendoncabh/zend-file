{
    "docs": [
        {
            "location": "/",
            "text": "zend-file\n\n\n\n\n\n\nzend-file provides a \nClassFileLocator\n for locating PHP files containing\nclasses, abstract classes, interfaces, and traits in a specified tree.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-file/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-file/",
            "title": "zend-file"
        },
        {
            "location": "/#zend-file",
            "text": "zend-file provides a  ClassFileLocator  for locating PHP files containing\nclasses, abstract classes, interfaces, and traits in a specified tree.   File issues at https://github.com/zendframework/zend-file/issues  Documentation is at https://docs.zendframework.com/zend-file/",
            "title": "zend-file"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nzend-file provides two specific pieces of functionality:\n\n\n\n\na \nClassFileLocator\n, which can be used to find PHP class files under a given\n  tree.\n\n\na \nTransfer\n subcomponent, for managing file uploads and reporting upload\n  progress.\n\n\n\n\nThe \nTransfer\n subcomponent is deprecated\n, and we recommend using the\nfile-related functionality in:\n\n\n\n\nzend-filter\n, which provides\n  functionality around moving uplaoded files to their final locations, renaming\n  uploaded files, and encrypting and decrypting uploaded files.\n\n\nzend-validator\n, which\n  provides functionality around validating uploaded files based on: number of\n  files uploaded, MIME types and/or extensions, upload status, compression,\n  hashing, and more.\n\n\nzend-progressbar\n, which\n  provides functionality for providing file upload status.\n\n\n\n\nIf you are determined to use the \nTransfer\n subcomponent, despite its\ndeprecation, please see the \nZend Framework 1 documentation on the component\n;\nyou can substitute \nUnderscore_Separated_Names\n for their namespaced equivalents\nto adapt the examples to this component.",
            "title": "Intro"
        },
        {
            "location": "/intro/#introduction",
            "text": "zend-file provides two specific pieces of functionality:   a  ClassFileLocator , which can be used to find PHP class files under a given\n  tree.  a  Transfer  subcomponent, for managing file uploads and reporting upload\n  progress.   The  Transfer  subcomponent is deprecated , and we recommend using the\nfile-related functionality in:   zend-filter , which provides\n  functionality around moving uplaoded files to their final locations, renaming\n  uploaded files, and encrypting and decrypting uploaded files.  zend-validator , which\n  provides functionality around validating uploaded files based on: number of\n  files uploaded, MIME types and/or extensions, upload status, compression,\n  hashing, and more.  zend-progressbar , which\n  provides functionality for providing file upload status.   If you are determined to use the  Transfer  subcomponent, despite its\ndeprecation, please see the  Zend Framework 1 documentation on the component ;\nyou can substitute  Underscore_Separated_Names  for their namespaced equivalents\nto adapt the examples to this component.",
            "title": "Introduction"
        },
        {
            "location": "/class-file-locator/",
            "text": "ClassFileLocator\n\n\nZend\\File\\ClassFileLocator\n is a PHP \nFilterIterator\n\nfor use with locating files containing PHP classes, interfaces, abstracts, or\ntraits. As such, it should be used in conjunction with a\n\nDirectoryIterator\n or\n\nRecursiveDirectoryIterator\n.\n\n\nUse cases include building class maps for autoloading.\n\n\nUsage\n\n\nThe \nClassFileLocator\n constructor can take one of:\n\n\n\n\na string representing a directory location; if valid, this will be used to\n  seed a \nRecursiveDirectoryIterator\n instance.\n\n\na \nDirectoryIterator\n instance.\n\n\na \nRecursiveDirectoryIterator\n instance.\n\n\n\n\nIn each case, once constructed, iteration will result in a list of files\ncontaining PHP clases, interfaces, abstracts, or traits.\n\n\nInstead of returning standard \nSplFileInfo\n\ninstances, the \nClassFileLocator\n is configured to cast to\n\nZend\\File\\PhpClassFile\n instances, which extend \nSplFileInfo\n, and provide the\nfollowing additional methods:\n\n\n\n\ngetClasses()\n: returns an array of all classes, abstract classes, interfaces,\n  and traits defined in the file; all names are fully qualified.\n\n\ngetNamespaces()\n: returns an array of namespaces defined in the file.\n\n\n\n\n\n\nTokenization\n\n\nThe \nClassFileLocator\n uses the \ntokenizer\n\nextension in order to locate items of interest; as such, its operations\nwill not execute PHP files it finds.\n\n\n\n\nExample\n\n\nThe following will spit out a PHP file that returns a class map for the \nsrc/\n\ndirectory in which it is run:\n\n\n<?php\nuse Zend\\File\\ClassFileLocator;\n\n$path = realpath(getcwd() . '/src');\n\n$locator = new ClassFileLocator($path);\n$map = [];\n\nforeach ($locator as $file) {\n    $filename = str_replace($path . '/', '', $file->getRealPath());\n    foreach ($file->getClasses() as $class) {\n        $map[$class] = $filename;\n    }\n}\n\nprintf(\"<?php\\nreturn %s;\", var_export($map, true));",
            "title": "ClassFileLocator"
        },
        {
            "location": "/class-file-locator/#classfilelocator",
            "text": "Zend\\File\\ClassFileLocator  is a PHP  FilterIterator \nfor use with locating files containing PHP classes, interfaces, abstracts, or\ntraits. As such, it should be used in conjunction with a DirectoryIterator  or RecursiveDirectoryIterator .  Use cases include building class maps for autoloading.",
            "title": "ClassFileLocator"
        },
        {
            "location": "/class-file-locator/#usage",
            "text": "The  ClassFileLocator  constructor can take one of:   a string representing a directory location; if valid, this will be used to\n  seed a  RecursiveDirectoryIterator  instance.  a  DirectoryIterator  instance.  a  RecursiveDirectoryIterator  instance.   In each case, once constructed, iteration will result in a list of files\ncontaining PHP clases, interfaces, abstracts, or traits.  Instead of returning standard  SplFileInfo \ninstances, the  ClassFileLocator  is configured to cast to Zend\\File\\PhpClassFile  instances, which extend  SplFileInfo , and provide the\nfollowing additional methods:   getClasses() : returns an array of all classes, abstract classes, interfaces,\n  and traits defined in the file; all names are fully qualified.  getNamespaces() : returns an array of namespaces defined in the file.",
            "title": "Usage"
        },
        {
            "location": "/class-file-locator/#tokenization",
            "text": "The  ClassFileLocator  uses the  tokenizer \nextension in order to locate items of interest; as such, its operations\nwill not execute PHP files it finds.",
            "title": "Tokenization"
        },
        {
            "location": "/class-file-locator/#example",
            "text": "The following will spit out a PHP file that returns a class map for the  src/ \ndirectory in which it is run:  <?php\nuse Zend\\File\\ClassFileLocator;\n\n$path = realpath(getcwd() . '/src');\n\n$locator = new ClassFileLocator($path);\n$map = [];\n\nforeach ($locator as $file) {\n    $filename = str_replace($path . '/', '', $file->getRealPath());\n    foreach ($file->getClasses() as $class) {\n        $map[$class] = $filename;\n    }\n}\n\nprintf(\"<?php\\nreturn %s;\", var_export($map, true));",
            "title": "Example"
        }
    ]
}