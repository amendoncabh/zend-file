{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zend-file zend-file provides a ClassFileLocator for locating PHP files containing classes, abstract classes, interfaces, and traits in a specified tree. File issues at https://github.com/zendframework/zend-file/issues Documentation is at https://docs.zendframework.com/zend-file/","title":"zend-file"},{"location":"#zend-file","text":"zend-file provides a ClassFileLocator for locating PHP files containing classes, abstract classes, interfaces, and traits in a specified tree. File issues at https://github.com/zendframework/zend-file/issues Documentation is at https://docs.zendframework.com/zend-file/","title":"zend-file"},{"location":"class-file-locator/","text":"ClassFileLocator Zend\\File\\ClassFileLocator is a PHP FilterIterator for use with locating files containing PHP classes, interfaces, abstracts, or traits. As such, it should be used in conjunction with a DirectoryIterator or RecursiveDirectoryIterator . Use cases include building class maps for autoloading. Usage The ClassFileLocator constructor can take one of: a string representing a directory location; if valid, this will be used to seed a RecursiveDirectoryIterator instance. a DirectoryIterator instance. a RecursiveDirectoryIterator instance. In each case, once constructed, iteration will result in a list of files containing PHP clases, interfaces, abstracts, or traits. Instead of returning standard SplFileInfo instances, the ClassFileLocator is configured to cast to Zend\\File\\PhpClassFile instances, which extend SplFileInfo , and provide the following additional methods: getClasses() : returns an array of all classes, abstract classes, interfaces, and traits defined in the file; all names are fully qualified. getNamespaces() : returns an array of namespaces defined in the file. Tokenization The ClassFileLocator uses the tokenizer extension in order to locate items of interest; as such, its operations will not execute PHP files it finds. Example The following will spit out a PHP file that returns a class map for the src/ directory in which it is run: <?php use Zend\\File\\ClassFileLocator; $path = realpath(getcwd() . '/src'); $locator = new ClassFileLocator($path); $map = []; foreach ($locator as $file) { $filename = str_replace($path . '/', '', $file->getRealPath()); foreach ($file->getClasses() as $class) { $map[$class] = $filename; } } printf(\"<?php\\nreturn %s;\", var_export($map, true));","title":"ClassFileLocator"},{"location":"class-file-locator/#classfilelocator","text":"Zend\\File\\ClassFileLocator is a PHP FilterIterator for use with locating files containing PHP classes, interfaces, abstracts, or traits. As such, it should be used in conjunction with a DirectoryIterator or RecursiveDirectoryIterator . Use cases include building class maps for autoloading.","title":"ClassFileLocator"},{"location":"class-file-locator/#usage","text":"The ClassFileLocator constructor can take one of: a string representing a directory location; if valid, this will be used to seed a RecursiveDirectoryIterator instance. a DirectoryIterator instance. a RecursiveDirectoryIterator instance. In each case, once constructed, iteration will result in a list of files containing PHP clases, interfaces, abstracts, or traits. Instead of returning standard SplFileInfo instances, the ClassFileLocator is configured to cast to Zend\\File\\PhpClassFile instances, which extend SplFileInfo , and provide the following additional methods: getClasses() : returns an array of all classes, abstract classes, interfaces, and traits defined in the file; all names are fully qualified. getNamespaces() : returns an array of namespaces defined in the file.","title":"Usage"},{"location":"class-file-locator/#example","text":"The following will spit out a PHP file that returns a class map for the src/ directory in which it is run: <?php use Zend\\File\\ClassFileLocator; $path = realpath(getcwd() . '/src'); $locator = new ClassFileLocator($path); $map = []; foreach ($locator as $file) { $filename = str_replace($path . '/', '', $file->getRealPath()); foreach ($file->getClasses() as $class) { $map[$class] = $filename; } } printf(\"<?php\\nreturn %s;\", var_export($map, true));","title":"Example"},{"location":"intro/","text":"Introduction zend-file provides two specific pieces of functionality: a ClassFileLocator , which can be used to find PHP class files under a given tree. a Transfer subcomponent, for managing file uploads and reporting upload progress. The Transfer subcomponent is deprecated , and we recommend using the file-related functionality in: zend-filter , which provides functionality around moving uplaoded files to their final locations, renaming uploaded files, and encrypting and decrypting uploaded files. zend-validator , which provides functionality around validating uploaded files based on: number of files uploaded, MIME types and/or extensions, upload status, compression, hashing, and more. zend-progressbar , which provides functionality for providing file upload status. If you are determined to use the Transfer subcomponent, despite its deprecation, please see the Zend Framework 1 documentation on the component ; you can substitute Underscore_Separated_Names for their namespaced equivalents to adapt the examples to this component.","title":"Intro"},{"location":"intro/#introduction","text":"zend-file provides two specific pieces of functionality: a ClassFileLocator , which can be used to find PHP class files under a given tree. a Transfer subcomponent, for managing file uploads and reporting upload progress. The Transfer subcomponent is deprecated , and we recommend using the file-related functionality in: zend-filter , which provides functionality around moving uplaoded files to their final locations, renaming uploaded files, and encrypting and decrypting uploaded files. zend-validator , which provides functionality around validating uploaded files based on: number of files uploaded, MIME types and/or extensions, upload status, compression, hashing, and more. zend-progressbar , which provides functionality for providing file upload status. If you are determined to use the Transfer subcomponent, despite its deprecation, please see the Zend Framework 1 documentation on the component ; you can substitute Underscore_Separated_Names for their namespaced equivalents to adapt the examples to this component.","title":"Introduction"}]}